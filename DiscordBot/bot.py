import os
import logging
import asyncio
import discord
from discord.ext import commands
import aiohttp
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.ERROR,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("discord_bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('discord_bot')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True  # –†–∞–∑—Ä–µ—à–∞–µ–º –±–æ—Ç—É —á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–π
bot = commands.Bot(command_prefix=['!', '/'], description="–ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º Vintage Story", intents=intents)

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å cogs
COGS_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'cogs')

# –°–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π (cogs) –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
EXTENSIONS = [
    'cogs.server_status',
    'cogs.notifications',
    'cogs.guides',
    'cogs.messages'
]

@bot.event
async def on_ready():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞ –∫ Discord"""
    logger.warning(f'–ë–æ—Ç {bot.user.name} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Discord! ID: {bot.user.id}')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    await bot.change_presence(
        activity=discord.Game(name=f"{Config.SERVER_NAME}: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É..."),
        status=discord.Status.idle
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö, –∫ –∫–æ—Ç–æ—Ä—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω –±–æ—Ç
    guilds_info = ", ".join([f"{guild.name} (ID: {guild.id})" for guild in bot.guilds])
    logger.warning(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–ª–µ–¥—É—é—â–∏–º —Å–µ—Ä–≤–µ—Ä–∞–º: {guilds_info}")

@bot.event
async def on_command_error(ctx, error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥"""
    if isinstance(error, commands.CommandNotFound):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
    
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: {error.param.name}")
        return
    
    if isinstance(error, commands.BadArgument):
        await ctx.send(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞: {error}")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {ctx.command}: {error}")
    await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∂—É—Ä–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")

@bot.command(name='ping', aliases=['–ø–∏–Ω–≥'])
async def ping(ctx):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –±–æ—Ç–∞"""
    latency = round(bot.latency * 1000)
    await ctx.send(f"Pong! üèì –ó–∞–¥–µ—Ä–∂–∫–∞: {latency} –º—Å")

@bot.command(name='uptime', aliases=['–∞–ø—Ç–∞–π–º'])
async def uptime(ctx):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    import datetime
    uptime = datetime.datetime.now() - bot.start_time
    days = uptime.days
    hours, remainder = divmod(uptime.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    uptime_str = f"{days} –¥–Ω. {hours} —á. {minutes} –º–∏–Ω. {seconds} —Å–µ–∫."
    
    embed = discord.Embed(
        title="–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞",
        description=f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: {uptime_str}",
        color=discord.Color.blue()
    )
    
    await ctx.send(embed=embed)

async def load_extensions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (cogs)"""
    for extension in EXTENSIONS:
        try:
            await bot.load_extension(extension)
            # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ {extension}: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        bot.start_time = discord.utils.utcnow()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        await load_extensions()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.start(Config.DISCORD_TOKEN)
    except aiohttp.ClientConnectorError:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Discord. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
    except discord.errors.LoginFailure:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Discord. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        if not bot.is_closed():
            await bot.close()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π asyncio
    asyncio.run(main())
