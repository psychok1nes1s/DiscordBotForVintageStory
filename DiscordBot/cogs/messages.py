import os
import json
import logging
import discord
from discord.ext import commands
import functools
from config import Config

logger = logging.getLogger('discord_bot')

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_only():
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    def decorator(func):
        @functools.wraps(func)
        async def wrapper(self, ctx, *args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º ID —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            admin_role_id = getattr(Config, 'ADMIN_ROLE_ID', None)
            
            # –ï—Å–ª–∏ ID —Ä–æ–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
            if not admin_role_id or admin_role_id == "000000000000000000":
                await ctx.send("‚ùå ID —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
                return
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π ID –≤ int
            try:
                admin_role_id = int(admin_role_id)
            except ValueError:
                await ctx.send("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_roles = [role.id for role in ctx.author.roles]
            if admin_role_id not in user_roles:
                await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return

            return await func(self, ctx, *args, **kwargs)
        return wrapper
    return decorator

class Messages(commands.Cog):
    """Cog –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞"""
    
    def __init__(self, bot):
        self.bot = bot
        
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
        self.BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        self.DATA_DIR = os.path.join(self.BASE_DIR, 'data')
        self.STORM_MESSAGES_FILE = os.path.join(self.DATA_DIR, 'storm_messages.json')
        self.SEASON_MESSAGES_FILE = os.path.join(self.DATA_DIR, 'season_messages.json')
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.storm_messages = self.load_messages('storm')
        self.season_messages = self.load_messages('season')
    
    def load_messages(self, message_type):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            file_path = ''
            if message_type == 'storm':
                file_path = self.STORM_MESSAGES_FILE
            elif message_type == 'season':
                file_path = self.SEASON_MESSAGES_FILE
            
            if file_path and os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–ø–∞ {message_type}: {e}")
            return {}
    
    def save_messages(self, message_type, messages):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤ —Ñ–∞–π–ª"""
        try:
            file_path = ''
            if message_type == 'storm':
                file_path = self.STORM_MESSAGES_FILE
            elif message_type == 'season':
                file_path = self.SEASON_MESSAGES_FILE
            
            if file_path:
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(messages, f, ensure_ascii=False, indent=2)
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–ø–∞ {message_type}: {e}")
            return False
    
    @commands.command(name='reload_messages', aliases=['–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å_—Å–æ–æ–±—â–µ–Ω–∏—è'])
    @admin_only()
    async def reload_messages(self, ctx):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –º–æ–¥—É–ª–µ
            self.storm_messages = self.load_messages('storm')
            self.season_messages = self.load_messages('season')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–æ–¥—É–ª–µ Notifications, –µ—Å–ª–∏ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω
            notifications_cog = self.bot.get_cog('Notifications')
            if notifications_cog:
                notifications_cog.storm_messages = notifications_cog.load_messages('storm')
                notifications_cog.season_messages = notifications_cog.load_messages('season')
                logger.info("–°–æ–æ–±—â–µ–Ω–∏—è –≤ –º–æ–¥—É–ª–µ Notifications —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
            await ctx.send("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            await ctx.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    @commands.command(name='list_messages', aliases=['—Å–ø–∏—Å–æ–∫_—Å–æ–æ–±—â–µ–Ω–∏–π'])
    @admin_only()
    async def list_messages(self, ctx, message_type=None):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        try:
            if not message_type:
                embed = discord.Embed(
                    title="–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π",
                    description="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:",
                    color=discord.Color.blue()
                )
                
                embed.add_field(
                    name="üå©Ô∏è –®—Ç–æ—Ä–º",
                    value="–°–æ–æ–±—â–µ–Ω–∏—è –æ —à—Ç–æ—Ä–º–∞—Ö\n–ö–æ–º–∞–Ω–¥–∞: `!—Å–ø–∏—Å–æ–∫_—Å–æ–æ–±—â–µ–Ω–∏–π storm`",
                    inline=True
                )
                
                embed.add_field(
                    name="üå± –°–µ–∑–æ–Ω—ã",
                    value="–°–æ–æ–±—â–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å–µ–∑–æ–Ω–æ–≤\n–ö–æ–º–∞–Ω–¥–∞: `!—Å–ø–∏—Å–æ–∫_—Å–æ–æ–±—â–µ–Ω–∏–π season`",
                    inline=True
                )
                
                await ctx.send(embed=embed)
                return
            
            messages = None
            if message_type.lower() == "storm":
                messages = self.storm_messages
                message_title = "üå©Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –æ —à—Ç–æ—Ä–º–∞—Ö"
            elif message_type.lower() == "season":
                messages = self.season_messages
                message_title = "üå± –°–æ–æ–±—â–µ–Ω–∏—è –æ —Å–µ–∑–æ–Ω–∞—Ö"
            else:
                await ctx.send(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π: {message_type}")
                return
            
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
            embed = discord.Embed(
                title=message_title,
                description=f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π: {message_type}",
                color=discord.Color.blue()
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç–º–±–µ–¥
            if not messages:
                embed.add_field(name="–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π", value="–î–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", inline=False)
            else:
                for key, value in messages.items():
                    if isinstance(value, list):
                        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                        message_list = "\n".join([f"- {msg}" for msg in value])
                        embed.add_field(name=key, value=message_list if message_list else "–ü—É—Å—Ç–æ", inline=False)
                    else:
                        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        embed.add_field(name=key, value=value, inline=False)
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã list_messages: {e}")
            await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.")
    
    @commands.command(name='add_message', aliases=['–¥–æ–±–∞–≤–∏—Ç—å_—Å–æ–æ–±—â–µ–Ω–∏–µ'])
    @admin_only()
    async def add_message(self, ctx, message_type=None, message_key=None, *, message_text=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.
        
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        !add_message [—Ç–∏–ø_—Å–æ–æ–±—â–µ–Ω–∏–π] [–∫–ª—é—á] [—Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è]
        
        –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
        - storm
        - season
        
        –ü—Ä–∏–º–µ—Ä—ã –∫–ª—é—á–µ–π:
        - start (–¥–ª—è storm)
        - spring (–¥–ª—è season)
        - summer (–¥–ª—è season)
        - autumn (–¥–ª—è season)
        - winter (–¥–ª—è season)
        """
        try:
            if not message_type or not message_key or not message_text:
                await ctx.send("‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `!add_message [—Ç–∏–ø_—Å–æ–æ–±—â–µ–Ω–∏–π] [–∫–ª—é—á] [—Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è]`")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            messages = {}
            if message_type == 'storm':
                messages = self.storm_messages
            elif message_type == 'season':
                messages = self.season_messages
            else:
                await ctx.send(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π: {message_type}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `!list_messages` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message_key in messages and isinstance(messages[message_key], list):
                # –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
                messages[message_key].append(message_text)
            elif message_key in messages:
                # –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —ç—Ç–æ –Ω–µ —Å–ø–∏—Å–æ–∫, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
                messages[message_key] = [messages[message_key], message_text]
            else:
                # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
                messages[message_key] = [message_text]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if message_type == 'storm':
                self.storm_messages = messages
            elif message_type == 'season':
                self.season_messages = messages
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            if self.save_messages(message_type, messages):
                await ctx.send(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–∏–ø—É '{message_type}' —Å –∫–ª—é—á–æ–º '{message_key}'.")
            else:
                await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã add_message: {e}")
            await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    
    @commands.command(name='remove_message', aliases=['—É–¥–∞–ª–∏—Ç—å_—Å–æ–æ–±—â–µ–Ω–∏–µ'])
    @admin_only()
    async def remove_message(self, ctx, message_type=None, message_key=None, message_index: int = None):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.
        
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        !remove_message [—Ç–∏–ø_—Å–æ–æ–±—â–µ–Ω–∏–π] [–∫–ª—é—á] [–∏–Ω–¥–µ–∫—Å]
        
        –ò–Ω–¥–µ–∫—Å - —ç—Ç–æ –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ (–Ω–∞—á–∏–Ω–∞—è —Å 0).
        –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º.
        
        –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
        - storm
        - season
        """
        try:
            if not message_type or not message_key:
                await ctx.send("‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `!remove_message [—Ç–∏–ø_—Å–æ–æ–±—â–µ–Ω–∏–π] [–∫–ª—é—á] [–∏–Ω–¥–µ–∫—Å]`")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            messages = {}
            if message_type == 'storm':
                messages = self.storm_messages
            elif message_type == 'season':
                messages = self.season_messages
            else:
                await ctx.send(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π: {message_type}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `!list_messages` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
            if message_key not in messages:
                await ctx.send(f"‚ùå –ö–ª—é—á '{message_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Ç–∏–ø–∞ '{message_type}'.")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message_index is not None:
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∏–Ω–¥–µ–∫—Å, —É–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if isinstance(messages[message_key], list):
                    if 0 <= message_index < len(messages[message_key]):
                        removed_message = messages[message_key].pop(message_index)
                        success_message = f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º {message_index} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ç–∏–ø–∞ '{message_type}' —Å –∫–ª—é—á–æ–º '{message_key}'."
                        
                        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —É–¥–∞–ª—è–µ–º –∫–ª—é—á
                        if not messages[message_key]:
                            del messages[message_key]
                            success_message += f" –ö–ª—é—á '{message_key}' —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç."
                    else:
                        await ctx.send(f"‚ùå –ò–Ω–¥–µ–∫—Å {message_index} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.")
                        return
                else:
                    await ctx.send(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º '{message_key}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º.")
                    return
            else:
                # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ —É–∫–∞–∑–∞–Ω, —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º
                del messages[message_key]
                success_message = f"‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ç–∏–ø–∞ '{message_type}' —Å –∫–ª—é—á–æ–º '{message_key}'."
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if message_type == 'storm':
                self.storm_messages = messages
            elif message_type == 'season':
                self.season_messages = messages
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            if self.save_messages(message_type, messages):
                await ctx.send(success_message)
            else:
                await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã remove_message: {e}")
            await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def setup(bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ cog"""
    await bot.add_cog(Messages(bot)) 