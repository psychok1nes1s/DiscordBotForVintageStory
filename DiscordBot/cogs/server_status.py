import os
import json
import logging
import asyncio
import discord
from discord.ext import commands, tasks
from datetime import datetime
import aiohttp
import hashlib
import requests
from config import Config

logger = logging.getLogger('discord_bot')

class ServerStatus(commands.Cog):
    """Cog –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"""
    
    def __init__(self, bot):
        self.bot = bot
        self.server_online = False
        self.player_count = 0
        self.manual_maintenance_mode = False  # –§–ª–∞–≥ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        self.maintenance_reason = ""  # –ü—Ä–∏—á–∏–Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        self.channel_update_lock = asyncio.Lock()
        
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        self.BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        self.DATA_DIR = os.path.join(self.BASE_DIR, 'data')
        self.SERVER_STATUS_FILE = os.path.join(self.DATA_DIR, 'server_status.json')
        
        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á
        self.status_update_task.start()
    
    def cog_unload(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ cog"""
        self.status_update_task.cancel()
    
    async def fetch_server_status(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(Config.VS_SERVER_URL, timeout=Config.REQUEST_TIMEOUT) as response:
                    if response.status == 200:
                        try:
                            # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON
                            content_type = response.headers.get('Content-Type', '').lower()
                            logger.debug(f"Content-Type –æ—Ç–≤–µ—Ç–∞: {content_type}")
                            
                            if 'application/json' in content_type:
                                data = await response.json(content_type=None)
                            else:
                                # –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–±—É–µ–º –≤—Ä—É—á–Ω—É—é –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON
                                text = await response.text()
                                logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. Content-Type: {content_type}")
                                logger.debug(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {text[:200]}")
                                
                                # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                                try:
                                    import json
                                    data = json.loads(text)
                                except json.JSONDecodeError as e:
                                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON: {e}")
                                    return {'online': False}
                            
                            # –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                            logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data}")
                            
                            # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏, –Ω–æ —Å—Ç–∞—Ç—É—Å "offline", –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ "online"
                            if (not data.get('online', False) and 
                                (data.get('players') and len(data.get('players', [])) > 0 or 
                                 data.get('playerCount', 0) > 0)):
                                data['online'] = True
                                logger.info("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å 'offline', –Ω–æ –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ 'online'.")
                            
                            return data
                        except aiohttp.ClientResponseError as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON-–æ—Ç–≤–µ—Ç–∞: {e}")
                            return {'online': False}
                    else:
                        logger.info(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°—Ç–∞—Ç—É—Å: {response.status}")
                        return {'online': False}
        except aiohttp.ClientConnectorError:
            logger.info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –°–µ—Ä–≤–µ—Ä –æ—Ñ—Ñ–ª–∞–π–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return {'online': False}
        except asyncio.TimeoutError:
            logger.info("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞.")
            return {'online': False}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return {'online': False}
    
    def ensure_server_status_file(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        os.makedirs(self.DATA_DIR, exist_ok=True)
        
        if not os.path.exists(self.SERVER_STATUS_FILE):
            server_status = {
                "server": {
                    "online": False,
                    "player_count": 0,
                    "max_players": Config.DEFAULT_MAX_PLAYERS,
                    "last_checked": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "players": []
                },
                "manual_maintenance": {
                    "active": False,
                    "reason": ""
                }
            }
            
            with open(self.SERVER_STATUS_FILE, 'w', encoding='utf-8') as f:
                json.dump(server_status, f, ensure_ascii=False, indent=2)
            
            logger.warning(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: {self.SERVER_STATUS_FILE}")
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –Ω–µ–º –ø–æ–ª–µ manual_maintenance
            try:
                with open(self.SERVER_STATUS_FILE, 'r', encoding='utf-8') as f:
                    server_status = json.load(f)
                
                # –ï—Å–ª–∏ –ø–æ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                if "manual_maintenance" not in server_status:
                    server_status["manual_maintenance"] = {
                        "active": False,
                        "reason": ""
                    }
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                    with open(self.SERVER_STATUS_FILE, 'w', encoding='utf-8') as f:
                        json.dump(server_status, f, ensure_ascii=False, indent=2)
                    
                    logger.warning(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ manual_maintenance –≤ —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    def get_current_server_status(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.ensure_server_status_file()
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
            with open(self.SERVER_STATUS_FILE, 'r', encoding='utf-8') as f:
                server_status = json.load(f)
                
            return server_status
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return {
                "server": {
                    "online": False,
                    "player_count": 0,
                    "max_players": Config.DEFAULT_MAX_PLAYERS,
                    "last_checked": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "players": []
                },
                "manual_maintenance": {
                    "active": False,
                    "reason": ""
                }
            }
    
    def create_server_status_embed(self, server_info, maintenance_info=None):
        """–°–æ–∑–¥–∞–µ—Ç —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            embed = discord.Embed(title=f"–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: {Config.SERVER_NAME}", color=discord.Color.blue())
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            server_data = server_info.get('server', {}) if isinstance(server_info, dict) else {}
            manual_maintenance_data = server_info.get('manual_maintenance', {}) if isinstance(server_info, dict) else {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            manual_maintenance_active = manual_maintenance_data.get('active', False)
            manual_maintenance_reason = manual_maintenance_data.get('reason', '')
            
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            if manual_maintenance_active:
                embed.color = discord.Color.orange()
                embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="üü† –¢–µ—Ö. –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", inline=True)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö. –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏
                if manual_maintenance_reason:
                    embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=manual_maintenance_reason, inline=False)
                else:
                    embed.add_field(name="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value="–°–µ—Ä–≤–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", inline=False)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                last_checked = server_data.get('last_checked', '') if server_data else server_info.get('lastChecked', '')
                if last_checked:
                    embed.set_footer(text=f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_checked}")
                
                return embed
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
            is_online = server_data.get('online', False) if server_data else server_info.get('online', False)
            
            # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω
            if is_online:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–µ—Ä–µ
                player_count = server_data.get('player_count', 0) if server_data else server_info.get('playerCount', 0)
                max_players = server_data.get('max_players', Config.DEFAULT_MAX_PLAYERS) if server_data else server_info.get('maxPlayers', Config.DEFAULT_MAX_PLAYERS)
                tps = server_data.get('tps', 0) if server_data else server_info.get('tps', 0)
                uptime = server_data.get('uptime', '') if server_data else server_info.get('uptime', '')
                version = server_data.get('version', '') if server_data else server_info.get('version', '')
                temporal_storm = server_data.get('temporal_storm', '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω') if server_data else server_info.get('temporalStorm', '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω')
                pretty_date = server_data.get('pretty_date', '') if server_data else server_info.get('prettyDate', '')
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–∫–µ, –Ω–æ player_count —Ä–∞–≤–µ–Ω 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
                players = server_data.get('players', []) if server_data else server_info.get('players', [])
                if len(players) > 0 and player_count == 0:
                    player_count = len(players)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–∫–µ, –Ω–æ player_count —Ä–∞–≤–µ–Ω 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
                if len(players) > 0 and player_count == 0:
                    player_count = len(players)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–∏–≥—Ä–æ–∫"
                if player_count == 0:
                    players_text = "–Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤"
                elif player_count == 1:
                    players_text = "1 –∏–≥—Ä–æ–∫"
                elif 2 <= player_count <= 4:
                    players_text = f"{player_count} –∏–≥—Ä–æ–∫–∞"
                else:
                    players_text = f"{player_count} –∏–≥—Ä–æ–∫–æ–≤"
                
                embed.color = discord.Color.green()
                embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="üü¢ –û–Ω–ª–∞–π–Ω", inline=True)
                embed.add_field(name="–ò–≥—Ä–æ–∫–æ–≤", value=str(player_count), inline=True)
                
                if tps:
                    embed.add_field(name="TPS", value=f"{tps:.1f}", inline=True)
                
                if uptime:
                    embed.add_field(name="–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã", value=uptime, inline=True)
                
                if version:
                    embed.add_field(name="–í–µ—Ä—Å–∏—è", value=version, inline=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–ø–æ—Ä–∞–ª—å–Ω–æ–º —à—Ç–æ—Ä–º–µ
                storm_emoji = "‚ö°" if temporal_storm == "–ê–∫—Ç–∏–≤–µ–Ω" else "‚òÄÔ∏è"
                embed.add_field(name="–¢–µ–º–ø–æ—Ä–∞–ª—å–Ω—ã–π —à—Ç–æ—Ä–º", value=f"{storm_emoji} {temporal_storm}", inline=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ –≤ –∏–≥—Ä–µ
                if pretty_date:
                    embed.add_field(name="–î–∞—Ç–∞ –≤ –∏–≥—Ä–µ", value=pretty_date, inline=True)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω
                if players:
                    player_names = ", ".join(players)
                    if len(player_names) > 1024:
                        player_names = player_names[:1020] + "..."
                    embed.add_field(name=f"–ò–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω ({len(players)})", value=player_names, inline=False)
                else:
                    embed.add_field(name="–ò–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω", value="–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤", inline=False)
            
            # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ñ—Ñ–ª–∞–π–Ω
            else:
                embed.color = discord.Color.red()
                embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="üî¥ –û—Ñ—Ñ–ª–∞–π–Ω", inline=True)
                embed.add_field(name="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value="–°–µ—Ä–≤–µ—Ä –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", inline=False)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            last_checked = server_data.get('last_checked', '') if server_data else server_info.get('lastChecked', '')
            if last_checked:
                embed.set_footer(text=f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_checked}")
            
            return embed
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–º–±–µ–¥–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —ç–º–±–µ–¥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            basic_embed = discord.Embed(title=f"–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: {Config.SERVER_NAME}", color=discord.Color.red())
            basic_embed.add_field(name="–û—à–∏–±–∫–∞", value="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ.", inline=False)
            return basic_embed
    
    async def update_bot_presence(self, server_info):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ Discord –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.bot.is_ready():
            # logger.info("–ë–æ—Ç –Ω–µ –≥–æ—Ç–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.")
            return
            
        server_data = server_info.get('server', {})
        # logger.info(f"update_bot_presence - server_info: {server_info}")
        # logger.info(f"update_bot_presence - server_data: {server_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        maintenance_active = server_info.get('manual_maintenance', {}).get('active', False)
        
        if maintenance_active:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            maintenance_reason = server_info.get('manual_maintenance', {}).get('reason', '–¢–µ—Ö. –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ')
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å" —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏
            status_text = f"{Config.SERVER_NAME}: {maintenance_reason}"
            await self.bot.change_presence(
                activity=discord.Game(name=status_text),
                status=discord.Status.dnd
            )
            return
            
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è
        if server_data.get('online', False):
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            player_count = server_data.get('player_count', 0)
            max_players = server_data.get('max_players', Config.DEFAULT_MAX_PLAYERS)
            
            # –ï—Å–ª–∏ player_count —Ä–∞–≤–µ–Ω 0, –Ω–æ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –ø—É—Å—Ç, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
            if player_count == 0 and server_data.get('players') and len(server_data.get('players', [])) > 0:
                player_count = len(server_data.get('players', []))
                # logger.info(f"update_bot_presence - –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {player_count}")
                
            # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
            game_time = server_data.get('pretty_date', '')
            storm_status = server_data.get('temporal_storm', '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω')
            
            # –°—Ç—Ä–æ–∏–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
            status_text = f"{Config.SERVER_NAME}: {player_count}/{max_players} –∏–≥—Ä–æ–∫–æ–≤"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —à—Ç–æ—Ä–º, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
            if storm_status != '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω':
                status_text += f" | –®—Ç–æ—Ä–º –∞–∫—Ç–∏–≤–µ–Ω!"
                
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–û–Ω–ª–∞–π–Ω" —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ
            # logger.info(f"update_bot_presence - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {status_text}")
            await self.bot.change_presence(
                activity=discord.Game(name=status_text),
                status=discord.Status.online
            )
        else:
            # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ñ—Ñ–ª–∞–π–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            await self.bot.change_presence(
                activity=discord.Game(name=f"{Config.SERVER_NAME}: –û—Ñ—Ñ–ª–∞–π–Ω"),
                status=discord.Status.idle
            )
    
    async def update_server_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        current_status = self.get_current_server_status()
        maintenance_active = current_status.get('manual_maintenance', {}).get('active', False)
        
        if maintenance_active:
            logger.warning(f"–†–µ–∂–∏–º —Ç–µ—Ö.–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω: {current_status.get('manual_maintenance', {})}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            self.manual_maintenance_mode = True
            self.maintenance_reason = current_status.get('manual_maintenance', {}).get('reason', '')
            return current_status
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
            current_status = self.get_current_server_status()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ –∏–∑ API
            server_info = await self.fetch_server_status()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            # logger.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: online={current_status.get('server', {}).get('online', False)}, " +
            #             f"player_count={current_status.get('server', {}).get('player_count', 0)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω
            prev_online = current_status.get('server', {}).get('online', False)
            curr_online = server_info.get('online', False)
            
            if not prev_online and curr_online:
                logger.warning("–°–µ—Ä–≤–µ—Ä —Å–Ω–æ–≤–∞ –æ–Ω–ª–∞–π–Ω!")
                # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
            elif prev_online and not curr_online:
                logger.warning("–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ—à–µ–ª –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º!")
                # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
            if 'server' not in current_status:
                current_status['server'] = {}
            
            current_status['server']['online'] = server_info.get('online', False)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
            player_count = server_info.get('playerCount', 0)
            players_list = server_info.get('players', [])
            
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ —Ä–∞–≤–Ω–æ 0, –Ω–æ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞
            if player_count == 0 and len(players_list) > 0:
                player_count = len(players_list)
                # logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ —Å 0 –Ω–∞ {player_count} –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏, –Ω–æ —Å–µ—Ä–≤–µ—Ä –ø–æ—á–µ–º—É-—Ç–æ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ñ—Ñ–ª–∞–π–Ω, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
            if player_count > 0 and not current_status['server']['online']:
                current_status['server']['online'] = True
                logger.warning("–°–µ—Ä–≤–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ñ—Ñ–ª–∞–π–Ω, –Ω–æ –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ 'online'.")
            
            current_status['server']['player_count'] = player_count
            current_status['server']['players'] = players_list
            
            current_status['server']['max_players'] = server_info.get('maxPlayers', Config.DEFAULT_MAX_PLAYERS)
            current_status['server']['last_checked'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            current_status['server']['temporal_storm'] = server_info.get('temporalStorm', '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω')
            current_status['server']['pretty_date'] = server_info.get('prettyDate', '')
            
            # –§–∏–∫—Å–∏—Ä—É–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
            player_count_changed = False
            if 'player_count_changed' in current_status:
                old_player_count = current_status.get('server', {}).get('player_count', 0)
                new_player_count = player_count
                player_count_changed = old_player_count != new_player_count
                current_status['player_count_changed'] = player_count_changed
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            self.server_online = server_info.get('online', False)
            self.player_count = player_count
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ —Ñ–∞–π–ª
            with open(self.SERVER_STATUS_FILE, 'w', encoding='utf-8') as f:
                json.dump(current_status, f, ensure_ascii=False, indent=2)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
            await self.update_bot_presence(current_status)
            
            return current_status
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return None
    
    @tasks.loop(seconds=15)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    async def status_update_task(self):
        """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            await self.update_server_status()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    @status_update_task.before_loop
    async def before_status_update(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        await self.bot.wait_until_ready()
        logger.warning("–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    @commands.command(name='status', aliases=['—Å—Ç–∞—Ç—É—Å'])
    async def status(self, ctx):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
            server_info = await self.update_server_status()
            
            if not server_info:
                await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
            embed = self.create_server_status_embed(server_info)
            await ctx.send(embed=embed)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã status: {e}")
            await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞.")

    @commands.command(name='maintenance', aliases=['—Ç–µ—Ö_—Ä–∞–±–æ—Ç—ã'])
    @commands.has_permissions(administrator=True)
    async def maintenance(self, ctx, *, reason=None):
        """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞.
        
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        !—Ç–µ—Ö_—Ä–∞–±–æ—Ç—ã [–ø—Ä–∏—á–∏–Ω–∞] - –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ç–µ—Ö. —Ä–∞–±–æ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π
        !—Ç–µ—Ö_—Ä–∞–±–æ—Ç—ã - –≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ç–µ—Ö. —Ä–∞–±–æ—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–∫–ª—é—á–µ–Ω
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
            current_status = None
            if os.path.exists(self.SERVER_STATUS_FILE):
                with open(self.SERVER_STATUS_FILE, 'r', encoding='utf-8') as f:
                    current_status = json.load(f)
            
            if not current_status:
                current_status = {
                    "server": {
                        "online": False,
                        "player_count": 0,
                        "max_players": Config.DEFAULT_MAX_PLAYERS,
                        "last_checked": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        "players": []
                    },
                    "manual_maintenance": {
                        "active": False,
                        "reason": ""
                    }
                }
            
            # –ï—Å–ª–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if "manual_maintenance" not in current_status:
                current_status["manual_maintenance"] = {
                    "active": False,
                    "reason": ""
                }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            is_maintenance_active = current_status["manual_maintenance"]["active"]
            
            # –ï—Å–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≤—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            if not reason:
                if not is_maintenance_active:
                    await ctx.send("‚ùå –†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω.")
                    return
                
                # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
                current_status["manual_maintenance"]["active"] = False
                current_status["manual_maintenance"]["reason"] = ""
                
                self.manual_maintenance_mode = False
                self.maintenance_reason = ""
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
                with open(self.SERVER_STATUS_FILE, 'w', encoding='utf-8') as f:
                    json.dump(current_status, f, ensure_ascii=False, indent=2)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
                await self.update_bot_presence(current_status)
                
                await ctx.send("‚úÖ –†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω.")
            else:
                # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π
                current_status["manual_maintenance"]["active"] = True
                current_status["manual_maintenance"]["reason"] = reason
                
                self.manual_maintenance_mode = True
                self.maintenance_reason = reason
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
                with open(self.SERVER_STATUS_FILE, 'w', encoding='utf-8') as f:
                    json.dump(current_status, f, ensure_ascii=False, indent=2)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
                await self.update_bot_presence(current_status)
                
                await ctx.send(f"‚úÖ –†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω —Å –ø—Ä–∏—á–∏–Ω–æ–π: {reason}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã maintenance: {e}")
            await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.")

    @maintenance.error
    async def maintenance_error(self, ctx, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥—ã maintenance"""
        if isinstance(error, commands.MissingPermissions):
            await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã maintenance: {error}")
            await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

async def setup(bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ cog"""
    await bot.add_cog(ServerStatus(bot)) 